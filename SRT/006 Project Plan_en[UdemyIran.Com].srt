1
00:00:00,810 --> 00:00:06,900
Before I start writing any code, I also build something called as a functional plan, which kind of

2
00:00:06,900 --> 00:00:10,920
is like a road map of how the function flow is going to happen.

3
00:00:11,280 --> 00:00:13,350
This will look quite confusing to you right now.

4
00:00:13,530 --> 00:00:18,210
You don't have to understand it completely because you don't have a lot of context about why this functional

5
00:00:18,210 --> 00:00:20,520
plan exists and why I've created these functional plans.

6
00:00:21,390 --> 00:00:28,530
But all you need to know is that when I start writing the code, I'll be organizing the code into functions.

7
00:00:28,800 --> 00:00:35,010
So functions, as you already know by now, are basically to help us repeat the same quarter again.

8
00:00:35,050 --> 00:00:38,730
Again, because in a function, once you define it as a function, you can always call it with different

9
00:00:38,730 --> 00:00:39,180
values.

10
00:00:39,630 --> 00:00:42,250
You don't have to write all those functions that same quarter again.

11
00:00:42,300 --> 00:00:42,680
Again, right?

12
00:00:42,690 --> 00:00:44,850
So this is the value proposition of a function.

13
00:00:45,490 --> 00:00:50,790
Now the way the whole program is going to be structured is going to have multiple functions where it

14
00:00:50,790 --> 00:00:54,440
could be our main function or some other critical function that call other functions, right?

15
00:00:54,450 --> 00:00:56,160
So there's a plan that we have to follow.

16
00:00:57,300 --> 00:01:01,620
And when we're writing code, it's very easy to get mixed up that easy to get confused.

17
00:01:02,160 --> 00:01:09,540
So if you take a step back, if you go through the plan on how you're going to approach this entire

18
00:01:09,540 --> 00:01:15,990
problem of creating a nutritional score calculator, then you can create a plan that, you know, these

19
00:01:15,990 --> 00:01:18,210
are the functions that of having the complete project.

20
00:01:19,140 --> 00:01:23,550
So now this program, the need to start the program is a small program.

21
00:01:23,550 --> 00:01:25,320
It's a beginner friendly, small program.

22
00:01:25,860 --> 00:01:31,800
So this plan will look like an overkill for this program, for this particular project right now.

23
00:01:32,370 --> 00:01:38,670
But as you transition into higher and higher roles in your career and you have more and more responsibilities,

24
00:01:38,670 --> 00:01:42,480
you're working on bigger and bigger projects across teams that work across the globe.

25
00:01:43,050 --> 00:01:47,190
Then you'd want to have this kind of a practice built in where you do a lot of visual planning, you

26
00:01:47,190 --> 00:01:50,520
do a lot of functional planning before you start writing a code because

27
00:01:53,280 --> 00:01:57,420
because you know you want to produce better quality, high quality code, right?

28
00:01:57,450 --> 00:01:58,560
That is reasonable.

29
00:01:58,560 --> 00:02:01,500
That's understandable by a lot of people.

30
00:02:01,890 --> 00:02:03,030
That's easily maintainable.

31
00:02:03,030 --> 00:02:03,230
Right?

32
00:02:03,240 --> 00:02:08,070
So all of these things like reusable and maintainable and easily understandable.

33
00:02:08,460 --> 00:02:12,660
These three words will sound like a lot of jargon to you if you're starting out your career as a developer.

34
00:02:12,720 --> 00:02:18,360
But if you if you've spent more than ten, 15 years in the industry, you would understand these are

35
00:02:18,360 --> 00:02:20,510
really critical and very important terms.

36
00:02:20,520 --> 00:02:23,820
And slowly you'll start valuing these things a lot more.

37
00:02:24,420 --> 00:02:30,270
So having said all of that, taking that out of the way, let's just talk about the functional plan,

38
00:02:31,110 --> 00:02:33,060
the context to this particular project.

39
00:02:34,080 --> 00:02:37,830
So I'm planning to have just one package, right?

40
00:02:37,830 --> 00:02:39,750
And that package is going to be called mean.

41
00:02:41,520 --> 00:02:43,860
So in a particular package, you can have multiple files.

42
00:02:44,490 --> 00:02:47,340
So in my package, in my main package, I'll have two files.

43
00:02:47,340 --> 00:02:52,440
One will be the nutrition score file, which is which will be termed as new and squircle.

44
00:02:53,010 --> 00:02:55,020
And I'll have the main file, which will be basically mean.

45
00:02:55,020 --> 00:02:55,770
Don't go fight.

46
00:02:56,400 --> 00:02:56,550
Right.

47
00:02:56,580 --> 00:02:58,270
This is the most important file in any program.

48
00:02:58,290 --> 00:03:02,760
This is where the command or the the control enters into the program.

49
00:03:02,790 --> 00:03:05,880
Very fundamental go file the mean not go file.

50
00:03:06,660 --> 00:03:09,750
So this this was my file or my package plan.

51
00:03:10,200 --> 00:03:13,560
This is my functional plan, which is basically what functions am I going to have.

52
00:03:13,980 --> 00:03:17,820
So I'll obviously have the main function because that's like the origin of your colon project.

53
00:03:17,820 --> 00:03:21,480
That's where the project originates from and the control starts from.

54
00:03:21,480 --> 00:03:28,920
So from the main function, which is function, I will be calling all these small functions.

55
00:03:30,480 --> 00:03:36,510
So as you know that the user will enter all of this informational information as an additional data

56
00:03:36,660 --> 00:03:38,280
to calculate the nutritional score.

57
00:03:38,820 --> 00:03:47,040
So all of this function, all of this data, I want to process that data to get the real units that

58
00:03:47,040 --> 00:03:50,970
I want so that I can start grading and creating a nutritional score.

59
00:03:51,180 --> 00:03:57,480
Now, if I want to grade on the database on the units, I need to call all of these functions, which

60
00:03:57,480 --> 00:03:58,650
is basically energy.

61
00:03:58,940 --> 00:04:00,420
Let me increase the size.

62
00:04:01,260 --> 00:04:08,040
So which is energy from local sugar gram, sugary fatty acid saturated fat acid gram, sodium mg foods

63
00:04:08,040 --> 00:04:09,850
plus and fiber and protein.

64
00:04:10,710 --> 00:04:15,990
But this is saying is that you're taking all those raw values that the user is inputting in as part

65
00:04:15,990 --> 00:04:16,649
of his log.

66
00:04:16,890 --> 00:04:24,030
So whenever an addition tells a user or a patient to, you know, follow that dietary plan to reduce

67
00:04:24,030 --> 00:04:28,530
weight or to get any other goal, it mostly it's to do some grid.

68
00:04:28,980 --> 00:04:33,180
So they log all of this information in a raw format, right.

69
00:04:33,180 --> 00:04:36,560
That our format could be something that looks like this, right?

70
00:04:36,750 --> 00:04:41,340
This is the real format, that additional data of the food and what the nutrition calculator does then

71
00:04:41,340 --> 00:04:50,220
is it converts that raw data into actual, you know, data that is like this, which is basically kilojoules

72
00:04:50,220 --> 00:04:54,090
programs, grams per hundred grams for sugar, sodium, etc..

73
00:04:55,590 --> 00:04:57,600
And this is what we'll be doing as well.

74
00:04:57,990 --> 00:04:59,910
So our main function is going to call all.

75
00:04:59,960 --> 00:05:02,780
Of these functions to convert that write into actual usable euro.

76
00:05:03,440 --> 00:05:09,310
And also our main function will call a function called get an additional score function and get new

77
00:05:09,320 --> 00:05:10,040
useful functions.

78
00:05:10,610 --> 00:05:14,960
So the main function is going to call all of these functions and get the data, and then it's going

79
00:05:14,960 --> 00:05:16,400
to call these two functions as well.

80
00:05:17,090 --> 00:05:22,310
So right now, it's just important to know that this is how your main or go file is going to be structured

81
00:05:22,310 --> 00:05:24,320
structure where the main function will call these functions.

82
00:05:24,750 --> 00:05:26,000
We also call these two functions.

83
00:05:26,300 --> 00:05:32,210
Now this function, the good nutritional score function is pretty important because this is the one

84
00:05:32,210 --> 00:05:38,930
that creates the nutritional score and it's going to call a lot of methods.

85
00:05:38,960 --> 00:05:40,110
Now, these are not functions.

86
00:05:40,130 --> 00:05:40,940
These are methods.

87
00:05:41,210 --> 00:05:45,530
So as you can see, get points is common here in all of these.

88
00:05:45,530 --> 00:05:45,800
Right.

89
00:05:46,640 --> 00:05:49,550
You can see that get points is a thing that's common in all of these.

90
00:05:49,560 --> 00:05:53,330
So you have sugars that get points, you have fruit, don't get plenty of fiber, don't get points,

91
00:05:53,330 --> 00:05:54,650
etc., etc., etc..

92
00:05:55,190 --> 00:05:56,480
Get points is the common thing.

93
00:05:56,960 --> 00:05:59,450
But sugars, fruits, fiber, etc. changing.

94
00:06:00,470 --> 00:06:04,160
So you have a type which will be sugars.

95
00:06:04,160 --> 00:06:08,150
You will have a type which will be fruit, fiber, etc. will be different types will be flawed.

96
00:06:08,150 --> 00:06:09,200
So it could be anything.

97
00:06:09,980 --> 00:06:13,040
And these are the methods that are for that particular type.

98
00:06:13,820 --> 00:06:20,240
So get points, sugars are good points is a method that is only usable for sugars and fruits get points

99
00:06:20,240 --> 00:06:23,840
as a method that's only usable for fruits and the way to access a method.

100
00:06:23,960 --> 00:06:30,230
As you must have learned in Golang, is that use the type and then you use dot method name.

101
00:06:30,530 --> 00:06:31,820
So these are not functions in the method.

102
00:06:31,820 --> 00:06:39,830
So the good nutrition called function will be calling a lot of methods again for separate things, for

103
00:06:39,830 --> 00:06:44,090
sugars, for fruits, for fiber, etc. and that will basically help us get the nutritional score.

104
00:06:45,520 --> 00:06:45,940
All right.

105
00:06:47,080 --> 00:06:48,850
So this is our main functional plan.

106
00:06:48,910 --> 00:06:50,380
This is our package.

107
00:06:50,380 --> 00:06:52,330
And final plan is the functional plan, right?

108
00:06:52,630 --> 00:06:54,010
Main function will be calling.

109
00:06:54,010 --> 00:06:58,900
These two functions will all be sort of guiding these all these functions to get the units that you

110
00:06:58,900 --> 00:07:04,120
want the property to in proper format so that you can create a new just one score, write additional

111
00:07:04,120 --> 00:07:05,140
score function.

112
00:07:05,560 --> 00:07:09,280
The way to create that score is by calling all of these methods.

113
00:07:09,670 --> 00:07:14,170
Now, again, when we write the code, everything will make much more sense to you.

114
00:07:14,170 --> 00:07:19,030
And the reason I do all this functional planning, all of the spatial planning, is so that you're able

115
00:07:19,030 --> 00:07:20,920
to take a step back here to to plan better.

116
00:07:21,340 --> 00:07:22,900
But this might change a little.

117
00:07:22,930 --> 00:07:27,700
A little bit might change while I'm coding, but feel free to take a screenshot of this or come back

118
00:07:27,700 --> 00:07:31,150
to this video when we are coding so that, you know, you know from where are we going?

119
00:07:33,760 --> 00:07:38,740
Now, if you're in the beginning of your career, if you're a junior developer or if you're just starting

120
00:07:38,740 --> 00:07:45,780
out in development, all of this will look like it'll be look I'll look to advance to you.

121
00:07:45,790 --> 00:07:47,950
It will look like, you know, maybe all this is not required.

122
00:07:47,950 --> 00:07:48,730
It's too advanced.

123
00:07:49,540 --> 00:07:54,040
But trust me, as you grow in your career, people understand the value of visual planning.

124
00:07:54,430 --> 00:07:59,830
So it'll be a great thing if you can start practicing practicing it now.

125
00:07:59,830 --> 00:08:00,280
It's an art.

126
00:08:00,280 --> 00:08:03,670
It takes a while to, you know, start thinking of things in this way.

127
00:08:03,940 --> 00:08:08,110
So thinking of code in a visual pattern and revision of my map kind of a format.

128
00:08:08,470 --> 00:08:15,400
So it takes a while to perfect the skill or this art and I would suggest you start doing it, you know,

129
00:08:15,400 --> 00:08:17,920
from even the first few programs that you write.

130
00:08:19,120 --> 00:08:21,610
So in the next video we'll start writing the code.

131
00:08:21,610 --> 00:08:28,540
And before that get on, I just want to show you all of this that, you know, this is what we've discussed.

132
00:08:28,540 --> 00:08:30,100
We've discussed about the nutrition calculator.

133
00:08:30,100 --> 00:08:37,240
We discussed about calculus, all the things that will be learning, the concepts discussed about the

134
00:08:37,240 --> 00:08:40,960
things that we'll be tracking, discussed about the nutritional score and the score type.

135
00:08:41,289 --> 00:08:46,510
Because remember these two things we discussed about nutrition data that the user will be entering discuss

136
00:08:46,510 --> 00:08:50,500
about the units that the user that we need to process the data into.

137
00:08:51,550 --> 00:08:54,100
And it's also the function called to sort of get nutrition school a function.

138
00:08:54,490 --> 00:08:57,010
And this was about the end result which is nutrition score.

139
00:08:57,620 --> 00:08:59,890
Then you discuss about that, we'll have a package.

140
00:09:00,160 --> 00:09:03,100
I mean, package will have two files, nutrition score and main file.

141
00:09:04,060 --> 00:09:08,080
Then we have the function of language, we have the main function, we have these two function.

142
00:09:08,080 --> 00:09:09,580
We can call from the main function.

143
00:09:09,940 --> 00:09:13,620
Else we also have these all these functions being called something functional and the good nutrition

144
00:09:13,630 --> 00:09:15,590
score function calls, all of these different methods.

145
00:09:15,590 --> 00:09:18,730
So we'll have to create these methods and we also have to call them from this function.

146
00:09:20,250 --> 00:09:22,530
So this was your entire project plan?

147
00:09:22,590 --> 00:09:24,540
You know, before I started recording, so.

148
00:09:24,540 --> 00:09:27,690
And the next week you would start coding and all of this will make a lot more sense to you.

149
00:09:27,690 --> 00:09:31,650
It's okay if you're not concerned and sort of anything, you know, because when you like the quote,

150
00:09:31,650 --> 00:09:33,210
you understand things a lot more.

151
00:09:33,570 --> 00:09:36,390
But this is just a good way to start before you write in court.

